AC_PREREQ(2.59)
AC_INIT(configure.in)

dnl The MPICH2 top-level configure adds a bunch of flags to the
dnl user-defined CFLAGS by processing different configure command-line
dnl arguments (--enable-g, --enable-default-optimization). These updated
dnl flags are passed down as a separate flag. Here, we don't care about
dnl the user-defined flags, but rather this updated flags, so we just
dnl overwrite CFLAGS with them.
PAC_SUBCONFIG_INIT()

dnl This is not completely implemented yet.
dnl AC_ARG_WITH(libatomic,
dnl [--with-libatomic=name - Specify the location of the libatomic package],
dnl with_libatomic=no)
dnl
dnl Set the directory that contains support scripts such as install-sh and
dnl config.guess
dnl
AC_CONFIG_AUX_DIR(../../../../confdb)

dnl
dnl Definitions will be placed in this file rather than in the DEFS variable
dnl
AC_CONFIG_HEADER(mpid_locksconf.h)
AH_TOP([/* -*- Mode: C; c-basic-offset:4 ; -*- */
/*  
 *  (C) 2001 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */
#ifndef MPID_LOCKSCONF_H_INCLUDED
#define MPID_LOCKSCONF_H_INCLUDED
])
AH_BOTTOM([#endif])


echo "RUNNING CONFIGURE FOR LOCKS"

dnl
dnl First check that we have a clean build if we are doing a VPATH build
PAC_VPATH_CHECK()

PAC_PROG_MAKE
AC_CHECK_PROGS(AR,ar)
if test -z "$AR" ; then
    AC_MSG_ERROR([The program ar is required for building MPICH2.  Make sure that your path includes ar])
fi
# Note that we set RANLIB to true if we don't find it (some systems neither
# need it nor provide it)
AC_CHECK_PROGS(RANLIB,ranlib,true)

AC_CHECK_FUNCS( yield sched_yield usleep sleep select )
AC_CHECK_FUNCS( mutex_init compare_and_swap )
AC_CHECK_FUNCS( pthread_mutexattr_init pthread_mutexattr_setpshared )
AC_CHECK_HEADERS( pthread.h sched.h )

if test "$HAVE_SPARC_INLINE_PROCESS_LOCKS" = "yes" ; then
    AC_DEFINE(HAVE_SPARC_INLINE_PROCESS_LOCKS, 1, [Use inline spin locks on SPARC architectures])
    # The current code design adds a .il file to CFLAGS, which (a) doesn't 
    # always reach all of the necessary files (I saw failures in ch3_progress.c
    # where the inline file was not in the Makefile) and (a) adds the inline
    # where it should not be, such as in mpicc.
    CFLAGS="$CFLAGS $LOCKCFLAGS"
dnl     AC_MSG_ERROR([Use of inline process locks is not supported.  Please volunteer to fix this code])
fi

AC_C_INLINE
AC_C_VOLATILE
AC_C_CONST

# This test is extremely lame, but it is easy and it _should_ work in
# cross-compilation scenarios.  A better test should be used in the future.
mips_szptr=0
AC_COMPUTE_INT(mips_szptr, [_MIPS_SZPTR],,)
if test $mips_szptr -ne 0 ; then
    AC_DEFINE(HAVE_GCC_AND_SICORTEX_ASM, 1, [Use SiCortex atomic primitives])
fi

# Check for Sun's atomic library
AC_MSG_CHECKING([for sun atomic library])
SAVE_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -I${srcdir}"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
    typedef int MPI_Aint; 
    #include"mpidu_atomics_sun_atomic_ops.h"
]],[[
    int a = 0, b = 1, c;
    MPIDU_Atomic_add(&a, 10);
    c = MPIDU_Atomic_cas_int(&a, 10, 11);
    c = MPIDU_Atomic_swap_int(&a, b);
 ]])]
,AC_DEFINE(HAVE_SUN_ATOMIC_OPS, 1, [define to 1 if we have sun's atomic library and atomic.h])
AC_MSG_RESULT([yes]),
AC_MSG_RESULT([no]))
CFLAGS="$SAVE_CFLAGS"


# Check for gcc intrinsic atomics
AC_MSG_CHECKING([for gcc atomic intrinsics])
SAVE_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -I${srcdir}"
AC_RUN_IFELSE([AC_LANG_PROGRAM(,[[
    const int orig_a = 0xCAFEBABE;
    const int orig_b = 0xDEADBEEF;
    int a = orig_a;
    int b;
    
    b = __sync_lock_test_and_set(&a, orig_b);

    if (a != orig_b || b != orig_a)
    {
        return 1;
    }
    return 0;
]])]
,AC_DEFINE(SYNC_LOCK_TEST_AND_SET_IS_SWAP, 1, [define to 1 if the gcc intrinisic __sync_lock_test_and_set is implemented as a swap ]),,true)

AC_LINK_IFELSE([AC_LANG_PROGRAM([[
    typedef int MPI_Aint; 
    #include"mpidu_atomics_gcc_intrinsics.h"
]],[[
    int a = 0, b = 1, c;
    MPIDU_Atomic_add(&a, 10);
    c = MPIDU_Atomic_cas_int(&a, 10, 11);
    c = MPIDU_Atomic_swap_int(&a, b);
 ]])]
,AC_DEFINE(HAVE_GCC_INTRINSIC_ATOMICS, 1, [define to 1 if we have gcc atomic intrinsic functions])
AC_MSG_RESULT([yes]),
AC_MSG_RESULT([no]))
CFLAGS="$SAVE_CFLAGS"


# Add the MPICH2 include flags to CPPFLAGS.  
CPPFLAGS="$CPPFLAGS $MPICH2_INCLUDE_FLAGS"

AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(MPILIBNAME)
AC_SUBST(CC)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
PAC_CC_SUBDIR_SHLIBS
AC_SUBST(master_top_srcdir)
dnl Etags
AC_SUBST(ETAGS)
AC_SUBST(ETAGSADD)
export ETAGS
export ETAGSADD
dnl
dnl Dependency handling
AC_SUBST(MAKE_DEPEND_C)

dnl Place holder macro for finalization
PAC_SUBCONFIG_FINALIZE()

AC_OUTPUT(Makefile)
