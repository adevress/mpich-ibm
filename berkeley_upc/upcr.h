/* UPC Runtime Layer API for compiler-generated code
 *
 * $Header: /var/local/cvs/upcr/upcr.h,v 1.84 2008/10/30 20:11:00 nenadv Exp $
 */

/* 
 * This file describes the interface between the platform-independent code
 * generated by a UPC-to-C translating compiler, and the hand-written UPC
 * runtime layer that implements the language on a given architecture
 *
 * Many/most of the operations below will be implemented using macros or inline
 * functions in an actual implementation (a number of design decisions in the
 * interface were based on the expected optimizations that will occur in such an
 * implementation) They are specified using function declaration syntax below to
 * make the types clear All correct generated code must type check using the
 * definitions below In no case should client code assume it can create a
 * "function pointer" to any of these operations
 *
 * Note this interface is meant primarily as a compilation target for a code
 * generator, not a library for hand-written code - as such, the goals of
 * expressiveness and performance generally take precedence over readability
 * and minimality
 */

#ifndef UPCR_H
#define UPCR_H

#ifdef __SUNPRO_C
  /* disable silly warnings which some macros trigger */
  #pragma error_messages(off, E_END_OF_LOOP_CODE_NOT_REACHED)
  #pragma error_messages(off, E_STATEMENT_NOT_REACHED)
  #pragma error_messages(off, E_LOOP_NOT_ENTERED_AT_TOP)
  /* disable a warning caused by generated code */
  #pragma error_messages(off, E_INC_USR_INC_MAY_NOT_PORTABLE)
#endif
#ifdef sun
/* need this on Solaris to get some commonly-used
 *    functions that users expect (like drand & friends) */
  #define __EXTENSIONS__ 1
#endif

/* we always handle local memory addresses ourselves, so tell gasnet not to do
 * local checks */
#define GASNETE_PUTGET_ALWAYSREMOTE 1
#include <gasnet.h>

#include <gasnet_tools.h>
#include <upcr_syshdrs.h>

#if UPCRI_USING_GCCUPC
  #define UPCRI_LIBWRAP 1
#endif

#if UPCRI_GASP
  #include <upcr_geninclude/gasp.h>
  #include <upcr_geninclude/gasp_upc.h>
#endif


/* -------------------------------------------------------------------------- */
/*
 * System parameters
 * =================
 * Provided by the runtime system implementation to describe the runtime
 * environment.  Most of this information is probably also made available to
 * the UPC translator at UPC-to-C compile-time (by some mechanism not
 * specified here), but some compilers may simply wish to generate generic
 * code that compiles to have the correct behavior at C compile time using
 * these preprocessor symbols.
*/
#define UPCR_MAXNODES	     GASNET_MAXNODES

/* UPCR_PLATFORM_ENVIRONMENT provides the platform-independent UPC compiler with
 *  some clues about the memory layout of the current platform to aid optimization
 *  trade-offs. 
 * The possible configuration values are:
 * UPCR_PURE_SHARED - purely shared memory, remote memory accesses are handled
 *	entirely by hardware with no software interpretation overhead
 * UPCR_PURE_DISTRIBUTED - purely distributed memory, remote memory accesses are
 *	handled by some software networking layer
 * UPCR_SHARED_DISTRIBUTED - a mixture of the above - some remote memory
 *	accesses are handled by hardware, others by a software networking layer
 * UPCR_OTHER - any configuration not captured by the above options
 */
#define UPCR_PURE_SHARED 1
#define UPCR_SHARED_DISTRIBUTED 2
#define UPCR_PURE_DISTRIBUTED 3

#if GASNET_CONDUIT_SMP
  #define UPCR_PLATFORM_ENVIRONMENT UPCR_PURE_SHARED
  #define UPCRI_PLATENV_STR "shared"
#elif (UPCRI_UPC_PTHREADS || UPCRI_USING_SHMEM)
  #define UPCR_PLATFORM_ENVIRONMENT UPCR_SHARED_DISTRIBUTED
  #define UPCRI_PLATENV_STR "shared-distributed"
#else
  #define UPCR_PLATFORM_ENVIRONMENT UPCR_PURE_DISTRIBUTED
  #define UPCRI_PLATENV_STR "distributed"
#endif


/* Iff a single shared memory segment used, and it starts at
 * the same virtual address on all threads 
 */
#if GASNET_ALIGNED_SEGMENTS && !(UPCRI_UPC_PTHREADS || UPCRI_USING_SHMEM)
#  define UPCRI_SINGLE_ALIGNED_REGIONS 1
#else
#  define UPCRI_SINGLE_ALIGNED_REGIONS 0
#endif

/* GCCUPC support: */
#if UPCRI_USING_GCCUPC
  #if UPCRI_STRUCT_SPTR
    #define UPCR_USING_LINKADDRS 1
  #endif
  #if UPCRI_UPC_PTHREADS
    #define UPCR_PTHREADS_SECTION
  #endif
#endif

/*
 * Translate GASNET macros into UPCR equivalents
 * only as required by public spec
 */
#define UPCR_RESTRICT		    GASNETT_RESTRICT
#define UPCR_PAGESIZE               GASNETT_PAGESIZE

/* use instead of getenv(), which may not get same value on all nodes */
#define upcr_getenv(env_name)	    gasnet_getenv((env_name))
extern char * bupc_getenv(const char *env_name);

/*
 * Symmetric segments, available on systems that divide the global heap into
 * equal segments.  Happens always on SMP, on CRAYX1 and on Altix 
 */
#if PLATFORM_ARCH_64 && ((GASNET_CONDUIT_SMP && UPCRI_UPC_PTHREADS) || \
    (GASNET_CONDUIT_SHMEM && (PLATFORM_ARCH_CRAYX1 || GASNETI_ARCH_ALTIX)))
  #define UPCRI_SYMMETRIC_SEGMENTS 1
#endif

/* User may explicitly set UPCR_DEBUG or UPCR_NDEBUG,
   otherwise use GASNet's debug setting by default
 */
#if !defined(UPCR_DEBUG) && !defined(UPCR_NDEBUG)
  #if defined(GASNET_DEBUG)
    #define UPCR_DEBUG 1
  #elif defined(GASNET_NDEBUG)
    #define UPCR_NDEBUG 1
  #endif
#endif
#if defined(UPCR_DEBUG) && !defined(UPCR_NDEBUG)
  #undef UPCR_DEBUG
  #define UPCR_DEBUG 1
#elif !defined(UPCR_DEBUG) && defined(UPCR_NDEBUG)
  #undef UPCR_NDEBUG
  #define UPCR_NDEBUG 1
#else
  #error bad defns of UPCR_DEBUG and UPCR_NDEBUG
#endif

#if UPCR_NDEBUG
  #define upcri_assert(expr) ((void)0)
#else
  #define upcri_assert(expr)                         \
    (PREDICT_TRUE(expr) ? (void)0 :                  \
      upcri_err("Assertion failure at %s %s:%i: %s", \
      ((const char *)GASNETT_CURRENT_FUNCTION ?      \
                     GASNETT_CURRENT_FUNCTION : ""), \
      __FILE__, __LINE__, #expr))
#endif

/* error handling routines */
#include <upcr_err.h>

/* node/thread/pthread logic */
#include <upcr_threads.h>

/* GASP profiling support */
#include <upcr_profile.h>

/* utility routines */
#include <upcr_util.h>

/* abstract shared pointer interface */
#include <upcr_sptr.h>

/* locks */
#include <upcr_locks.h>

/* sem */
#include <upcr_sem.h>

/* barriers */
#include <upcr_barrier.h>

/* collectives */
#include <upcr_collective.h>

/* I/O */
#include <upcr_io.h>

/* Memory allocation functions */
#include <upcr_alloc.h>

/* Active Message handlers */
#include <upcr_handlers.h>

/* Shared memory access functions */
#include <upcr_shaccess.h>

/* Memcpy extension functions */
#include <upcr_memcpy.h>

/* Runtime initialization functions */
#include <upcr_init.h>

/* extern functions (use for bootstrapping) */
#include <bupc_extern.h>

/* Atomic extension functions */
#include <upcr_atomic.h>

#if __GCC_UPC__
#include <upcr_gccupc.h>
#endif

/*
 * Network polling
 * ===============
 *
 * The upcr_poll() function explicitly causes the runtime to attempt to make
 * progress on any network requests that may be pending.  While many other
 * runtime functions implicitly do this as well (i.e. most of those which call
 * the network layer) this function may be useful in cases where a large amount
 * of time has elapsed since the last runtime call (e.g. if a great deal of
 * application-level calculation is taking place).  This function may also be
 * indirectly when a upc_fence is used.
 *
 * upcr_poll() also provides a null strict reference, corresponding to upc_fence in the
 * UPC memory model. 
 * DOB: we should really rename upcr_poll to upcr_fence, but this would break 
 * compatibility between old runtimes and new translators, so until the next
 * major runtime interface upgrade, (b)upc_poll expands to upcr_poll_nofence,
 * which polls without the overhead of strict memory fences.
 */
#define upcr_poll_nofence() gasnet_AMPoll()

#if GASNET_CONDUIT_SMP && !UPCRI_UPC_PTHREADS && !UPCRI_USING_SHMEM
  /* in the special case of exactly one UPC thread, nothing is required for
   * correctness of fence (poll is likely a no-op as well, included solely
   * for tracing purposes)
   */
  #define upcr_poll() upcr_poll_nofence()
#else
  /* in all other cases, a fence needs to act as a null strict reference, 
   * which means we need an architectural membar & optimization barrier to
   * ensure that surrounding relaxed shared and local operations are not 
   * reordered in any way across this point (which could be visible if other
   * CPU's or an RDMA enabled NIC are modifying memory via strict operations).
   * We need both an WMB and RMB within the fence, but it doesn't actually matter
   * whether they come before or after the optional poll (which is added as 
   * a performance optimization, to help ensure progress in spin-loops using fence).
   * We combine them in a call to gasnett_local_mb(), which on some architectures
   * can be slightly more efficient than WMB and RMB called in sequence.
   */
  #define upcr_poll() do {              \
      gasnett_local_mb();               \
      upcr_poll_nofence();              \
    } while (0)
#endif


/* UPCR_CONFIG_STRING 
   a string representing all the relevant upcr configuration settings 
   that can be compared using string compare to verify version compatibility.
   The string is also embedded into the library itself such that it can be 
   scanned for within a binary executable.
*/

#if UPCR_DEBUG
  #define UPCRI_DEBUG_CONFIG "debug"
#else
  #define UPCRI_DEBUG_CONFIG "nodebug"
#endif

#if UPCRI_PACKED_SPTR
  #define UPCRI_SPTR_CONFIG_BASE "packed"
#else
  #define UPCRI_SPTR_CONFIG_BASE "struct"
#endif
#if UPCRI_SYMMETRIC_PSHARED
  #if __BERKELEY_UPC_POW2_SYMPTR__
    #define UPCRI_SPTR_CONFIG "fsymmetric/" UPCRI_SPTR_CONFIG_BASE
  #else
    #define UPCRI_SPTR_CONFIG "symmetric/" UPCRI_SPTR_CONFIG_BASE
  #endif
#else
  #define UPCRI_SPTR_CONFIG UPCRI_SPTR_CONFIG_BASE
#endif

#if UPCRI_UPC_PTHREADS
  #define UPCRI_SHMEM "pthreads"
#elif UPCRI_USING_SHMEM
  #define UPCRI_SHMEM "shmem"
#else
  #define UPCRI_SHMEM "none"
#endif

#if UPCRI_GASP
  #define UPCRI_GASP_CONFIG "gasp"
#else
  #define UPCRI_GASP_CONFIG "nogasp"
#endif

#if UPCRI_SUPPORT_TOTALVIEW
  #define UPCRI_TV_CONFIG "tv"
#else
  #define UPCRI_TV_CONFIG "notv"
#endif

#if UPCRI_USING_GCCUPC
  #define UPCRI_TRANS_CONFIG "gccupc"
#else
  #define UPCRI_TRANS_CONFIG "berkeleyupc"
#endif

#define UPCR_CONFIG_STRING "VERSION=" UPCR_VERSION ","           \
                           "PLATFORMENV=" UPCRI_PLATENV_STR ","  \
                           "SHMEM=" UPCRI_SHMEM ","              \
                           "SHAREDPTRREP=" UPCRI_SPTR_CONFIG "," \
                           "TRANS=" UPCRI_TRANS_CONFIG ","       \
                           UPCRI_DEBUG_CONFIG ","                \
                           UPCRI_GASP_CONFIG ","                 \
                           UPCRI_TV_CONFIG

/* DOB: would be nice to include UPCR_MAX_BLOCKSIZE, but there's no convenient
        way to get it as an integer literal at library preprocess time, so punt for now...
                           "MAXBLOCKSIZE=" _STRINGIFY(UPCR_MAX_BLOCKSIZE) "," \
*/

/* used by upcc when compiling client code */
#if __UPC_STATIC_THREADS__
  #ifndef THREADS
    #error THREADS not defined!
  #endif
  #define UPCRI_THREADCONFIG_STR ",staticthreads=" _STRINGIFY(THREADS)
#elif __UPC_DYNAMIC_THREADS__
  #define UPCRI_THREADCONFIG_STR ",dynamicthreads"
#endif

#if UPCRI_LIBWRAP
  #define UPCRI_LIBWRAP_FN __attribute__((__always_inline__)) static __inline__
  #ifdef __BERKELEY_UPC_ONLY_PREPROCESS__ /* only during app compile, not libupcr compile */
    #include <bupc_wrappers.h>
    #ifndef BUPC_DISABLE_EXTENSIONS
      #include <bupc_extensions.h>
    #endif
  #endif
#endif

/* undef some particularly naughty/dangerous internal functions that should 
   never be available in code outside UPCR */
#undef upcri_s_islocal
#undef upcri_p_islocal
#undef upcri_s_nodeof
#undef upcri_p_nodeof
#undef upcri_s2local
#undef upcri_s2localoff
#undef upcri_p2local
#undef upcri_p2localoff
#if !_IN_UPCR_GLOBFILES_C
#define _upcri_shared_to_remote             abort
#define _upcri_shared_to_remote_off         abort
#define _upcri_shared_to_remote_withthread  abort
#define _upcri_pshared_to_remote            abort
#define _upcri_pshared_to_remote_off        abort
#define _upcri_pshared_to_remote_withthread abort
#define _upcri_shared_remote_to_mylocal     abort
#endif

#endif /* UPCR_H */

