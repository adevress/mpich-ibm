dnl --------------------------------------------------------------- 
dnl     Run 'autoscan' on your code, and compare what you see here
dnl     with 'configure.scan'.  Absorb what looks promising, then
dnl     process this file with autoconf to produce a 'configure' script
dnl         -- you may need to run 'aclocal' first
dnl ---------------------------------------------------------------

dnl     Generates init code for configure: filename is optional, and is tested
dnl     for existence to make sure configure isn't confused about directories
AC_INIT(upcr.h)
AC_PREREQ(2.13)

dnl     Store autoconf temp files in 'config' directory instead of root
AC_CONFIG_AUX_DIR(config-aux)

dnl set target_cpu, target_vendor, target_os, etc.
AC_CANONICAL_SYSTEM
AC_VALIDATE_CACHED_SYSTEM_TUPLE

dnl     Initializes automake: requires 'package' name and version as args.
AM_INIT_AUTOMAKE(berkeley_upc, UPCR_VERSION_LIT, no-define)
if test "" ; then
  dnl workaround a bug in aclocal 1.4
  AM_INIT_AUTOMAKE(x,x,no-define) 
fi

dnl     Name of the header file containing config #defines 
dnl     --if you use this, run 'autoheader' before 'automake'
AM_CONFIG_HEADER(upcr_config.h)

dnl     Our upper case versions of these standard configure variables use
dnl     full path instead of relative path
AC_PREFIX_DEFAULT(/usr/local/berkeley_upc)

GASNET_START_CONFIGURE([])
GASNET_DEFINE_CONFIGURE_VARS([UPCRI])

UPCR_INIT_VERSIONS()

dnl     Tell gasnet_trace to identify itself as upc_trace
GASNET_SUBCONFIGURE_ARG(--with-tool-prefix=upc)
GASNET_PROG_PERL

dnl bug 2323: disallow configure --program-{prefix,suffix,transform}
GASNET_FORBID_PROGRAM_TRANSFORM

dnl     Need to parse --with-gccupc before detecting CC, since it changes the
dnl     default value for CC to the 'gcc' that comes with gccupc's 'upc'
GASNET_IF_ENABLED(sptr-packed, 
    [Use the more efficient 'packed' shared pointer representation (on by default)], 
                [force_packed_sptr="yes"], [])
GASNET_IF_ENABLED(sptr-struct, 
    [Use the 'struct' shared pointer representation], 
                [force_struct_sptr="yes"], [])
GASNET_IF_ENABLED(sptr-symmetric, 
    [Enable 'symmetric' pointer variant where available (64-bit smp & shmem) (off by default)], 
                [force_symmetric_sptr="yes"], [])
HARNESS_TRANS_OPTION="-trans"
AC_SUBST(HARNESS_TRANS_OPTION)
COMPILER_SPEC_FILE="compiler.spec"
AC_SUBST(COMPILER_SPEC_FILE)
GASNET_WITH(gccupc, [use gccupc compiler (provide full pathname to 'upc')],
    [if test "$withval" = "yes"; then
        AC_MSG_ERROR(['--with-gccupc requires pathname to 'upc' or 'xupc'])
     fi
     AC_MSG_CHECKING(for gccupc)
     gccdir=`expr "$withval" : '\(.*\)/x*upc$'`
     if test -z "$gccdir"; then
        AC_MSG_ERROR("--with-gccupc: must provide full path to 'upc' or 'xupc'")
     fi
     TRANSLATOR="$withval"
     AC_MSG_RESULT($TRANSLATOR)
# Default CC to gccupc's 'gcc' (living in same directory as 'upc')
#   - TODO: make this work:  right now gasnet doesn't see the CC change if we
#           merely set CC=$gccdir/gcc.  If we export CC (or append
#           CC=$gccdir/gcc or --with-cc=$gccdir/gcc to ac_configure_args),
#           gasnet's configure dies complaining that CC wasn't set in the last
#           configure invocation.  This is because it shared the same
#           config.cache with upcr.
#       - for now, force users to set CC=<gccupc's gcc> if they want it.
#   - UPDATE: we do *not* require the use of CC=<gccupc's gcc>: that approach is fully supported, but optional
#         users are free to supply a different CC provided it is ABI compatible with gccupc
#     if test -n "`$gccdir/gcc -v 2>&1 < /dev/null | grep 'gcc version'`"; then
#         if test -z "$CC"; then
#             CC="$gccdir/gcc"
#         fi
#     fi
     
     AC_DEFINE(UPCRI_USING_GCCUPC)
     USING_GCCUPC="yes"
     HARNESS_TRANS_OPTION=""
     GCCUPC_VERSION=
     GASNET_WITH(gccupc-version, [Force UPCR to assume a particular version of GCC/UPC (default is auto-detect)], 
       [ # don't attempt to run GCC/UPC (eg when building an RPM it might not yet be installed)
         # just accept the version override and trust the user knows what he's doing
         GCCUPC_VERSION="$withval"
	 AC_MSG_WARN([Accepting --with-gccupc-version=$GCCUPC_VERSION. Translator validation check skipped.])
       ])
     if test -z "$GCCUPC_VERSION" ; then # auto-detect version by running the compiler
       AC_MSG_CHECKING(for gccupc version)
       if test -z "`$TRANSLATOR -v 2>&1 < /dev/null | grep 'GCC UPC'`" ; then
         AC_MSG_ERROR(['--with-gccupc' requires pathname to 'upc' or 'xupc' executable])
       fi
       # Old GCC UPC version string:
       #  xgcc (GCC) 4.0.3 20071007 upc-4.0.3.5 (GCC UPC/dev)
       # New GCC UPC version string:
       #  xgcc (GCC) 4.2.0 20071006 (dev) (GCC UPC 4.2.0-1) 
       # Above, in a production compiler, xgcc is gcc,
       # and dev (with optional parens) is not present.
       GCCUPC_VERSION=`$TRANSLATOR -v 2>&1 | \
         $PERL -ne 'if (/upc-(\S+) .GCC UPC/ or /\(GCC UPC (\S+)?\)/) {print $1;}'`
     fi
     GCCUPC_VERSION_MAJOR=`echo "$GCCUPC_VERSION" | \
         $PERL -ne 'if (m/(\d+)\.\d+\.\d+[[.-]]\d+/) {print $1;}'`
     if test -z "$GCCUPC_VERSION_MAJOR" ; then
       AC_MSG_ERROR([Missing or invalid GCC/UPC translator version: $GCCUPC_VERSION])
     else
       AC_MSG_RESULT($GCCUPC_VERSION)
     fi
     if test "$GCCUPC_VERSION_MAJOR" -lt 4 ; then
       AC_MSG_ERROR([This version of UPCR requires GCC/UPC version 4.x or greater. Detected GCC/UPC translator version: $GCCUPC_VERSION])
     fi
     AC_SUBST(GCCUPC_VERSION)

     # bless gccupc's gcc as ok
     # The problem in question should not affect that config anyhow because
     # local accesses are generated as assembly from gccupc, instead of UPCR calls
     GASNET_SUBCONFIGURE_ARG(--enable-allow-gcc4)

     # Versions 4.2.0.2 and up support init sections
     AC_MSG_CHECKING([for gccupc init section support])
     GCCUPC_CANONICAL_VERSION=`echo "$GCCUPC_VERSION" | \
         $PERL -ne 'if (m/(\d+)\.(\d+)\.(\d+)[[.-]](\d+)/) \
          {printf "%01d.%02d.%02d.%02d", $1, $2, $3, $4;}'`
     GCCUPC_INIT_SECTION=`$PERL -e \
       "print '$GCCUPC_CANONICAL_VERSION' ge '4.02.00.02' ? 'yes':'no'"`
     AC_MSG_RESULT($GCCUPC_INIT_SECTION)
     if test "$GCCUPC_INIT_SECTION" = "yes"; then
       AC_DEFINE(UPCRI_USING_GCCUPC_INIT_SECTION)
     else
       AC_DEFINE(UPCRI_USING_GCCUPC_INIT_STATIC_COPY)
     fi
     AC_MSG_CHECKING([for older gccupc that supports only struct pointer-to-shared])
     GCCUPC_HAS_ONLY_STRUCT_SPTR=`$PERL -e \
       "print '$GCCUPC_CANONICAL_VERSION' lt '4.02.00.02' ? 'yes':'no'"`
     AC_MSG_RESULT($GCCUPC_HAS_ONLY_STRUCT_SPTR)
     AC_MSG_CHECKING([for gccupc that supports new struct pointer-to-shared format])
     GCCUPC_HAS_NEW_STRUCT_SPTR=`$PERL -e \
       "print '$GCCUPC_CANONICAL_VERSION' ge '4.02.03.05' ? 'yes':'no'"`
     AC_MSG_RESULT($GCCUPC_HAS_NEW_STRUCT_SPTR)

     AC_MSG_CHECKING(for __attribute__((__aligned__ (16))))
     GASNET_TRY_CCOMPILE_WITHWARN([
	#undef __attribute__
	typedef struct {int x; int y;} __attribute__((__aligned__ (16))) foo;
	], [ ], [
	 AC_MSG_RESULT(yes)
	 AC_DEFINE(HAVE_GCC_ATTRIBUTE_ALIGNED)
	 have_attrib_aligned=1
       ],[ AC_MSG_RESULT([no/warning])
       ],[ AC_MSG_RESULT([no/error]) 
     ])

     COMPILER_SPEC_FILE="gcc-upc-upcr.spec"
     if test -n "$force_symmetric_sptr"; then 
       AC_MSG_ERROR(['--with-gccupc' does not support '--enable-sptr-symmetric'])
     fi
     AC_MSG_CHECKING([for gccupc packed sptr support])
     if test "$with_gccupc_version"; then
       if test "$GCCUPC_HAS_ONLY_STRUCT_SPTR" = "yes" \
               -o -n "$force_struct_sptr"; then
	 GCCUPC_PACKED_SPTR="no"
       else
         GCCUPC_PACKED_SPTR="yes"
       fi
     else
       # We'd like to use the AC_TRY_CPP macro here, but GCCUPC has
       # a bug where it always exits with a 0 status even when
       # it hits the #error preprocessor op.
       cat > conftest.upc << _ACEOF
	  #if !__UPC_PTS_PACKED_REP__
	    #error UPC packed shared pointers are not supported.
	  #endif
_ACEOF
       if $TRANSLATOR -E conftest.upc 2>&1 | grep '#error' > /dev/null; then
	 GCCUPC_PACKED_SPTR="no"
       else
	 GCCUPC_PACKED_SPTR="yes"
       fi
       rm -f conftest.upc
     fi
     AC_MSG_RESULT($GCCUPC_PACKED_SPTR)
     if test "$GCCUPC_PACKED_SPTR" = "yes"; then
       if test -n "$force_struct_sptr"; then
	   AC_MSG_ERROR([The GCCUPC installation at $TRANSLATOR does not support '--enable-sptr-struct'. If you wish to use the struct pointer-to-shared representation (eg to support huge thread counts, memory sizes or shared blocksizes) then you must configure GCCUPC with: --with-upc-pts=struct])
       fi
       force_packed_sptr="yes"
     else
       if test -n "$force_packed_sptr"; then 
	 if test "$GCCUPC_HAS_ONLY_STRUCT_SPTR" = "yes"; then
	   AC_MSG_ERROR([The GCCUPC installation at $TRANSLATOR does not support '--enable-sptr-packed'. Packed pointer support is available starting in GCCUPC v4.2.0.2])
	 else
	   AC_MSG_ERROR([The GCCUPC installation at $TRANSLATOR does not support '--enable-sptr-packed'. If you wish to use the packed pointer-to-shared representation then you must configure GCCUPC with: --with-upc-pts=packed])
	 fi
       fi
       if test -z "$have_attrib_aligned"; then
         AC_MSG_ERROR([GCCUPC requires CC to support __attribute__(__aligned__) for struct pointers])
       fi
       force_struct_sptr="yes"
     fi
     # Newer GCCUPC's will report their pointer-to-shared configuration.
     if test -z "$with_gccupc_version"; then
       AC_MSG_CHECKING(
	 [for gccupc that provides pointer-to-shared configuration information])
       GCCUPC_HAS_SPTR_CONFIG=`$PERL -e \
	 "print '$GCCUPC_CANONICAL_VERSION' ge '4.02.03.04' ? 'yes':'no'"`
       AC_MSG_RESULT($GCCUPC_HAS_SPTR_CONFIG)
     fi
     if test "$GCCUPC_HAS_SPTR_CONFIG" = "yes"; then
       cat > conftest.upc << _ACEOF
#define _XSTR(X) #X
#define _STR(S) _XSTR(S)
#if __UPC_VADDR_FIRST__
UPCRI_SPTR_ADDR_FIRST=1
#endif
UPCRI_ADDR_BITS_OVERRIDE=_STR(__UPC_VADDR_SIZE__)
UPCRI_PHASE_BITS_OVERRIDE=_STR(__UPC_PHASE_SIZE__)
UPCRI_THREAD_BITS_OVERRIDE=_STR(__UPC_THREAD_SIZE__)
#if __UPC_PTS_STRUCT_REP__
UPCRI_STRUCT_SPTR_ADDR_TYPE=_STR(__UPC_VADDR_TYPE__)
UPCRI_STRUCT_SPTR_PHASE_TYPE=_STR(__UPC_PHASE_TYPE__)
UPCRI_STRUCT_SPTR_THREAD_TYPE=_STR(__UPC_THREAD_TYPE__)
#ifdef __UPC_VADDR_FIELD__
UPCRI_STRUCT_SPTR_ADDR_FIELD=_STR(__UPC_VADDR_FIELD__)
#endif
#ifdef __UPC_PHASE_FIELD__
UPCRI_STRUCT_SPTR_PHASE_FIELD=_STR(__UPC_PHASE_FIELD__)
#endif
#ifdef __UPC_THREAD_FIELD__
UPCRI_STRUCT_SPTR_THREAD_FIELD=_STR(__UPC_THREAD_FIELD__)
#endif
#endif
_ACEOF
	 eval `$TRANSLATOR -E conftest.upc | grep '^ *UPCRI_[[A-Z0-9_]]*='`
	 rm -f conftest.upc
     else
       # Set configuration defaults based upon version and target word size
       GASNET_CHECK_SIZEOF(void *)
       GCCUPC_PTR_BITS=`expr $SIZEOF_VOID_P \* 8`
       if test -n "$force_struct_sptr"; then
	 AC_MSG_RESULT([Setting default struct sptr configuration values])
	 if test "$GCCUPC_HAS_NEW_STRUCT_SPTR" = "yes" ; then
	   UPCRI_SPTR_ADDR_FIRST=1
	   if test "$GCCUPC_PTR_BITS" = 64 ; then
	     UPCRI_ADDR_BITS_OVERRIDE=64
	     UPCRI_THREAD_BITS_OVERRIDE=32
	     UPCRI_PHASE_BITS_OVERRIDE=32
	     UPCRI_STRUCT_SPTR_ADDR_TYPE="char *"
	     UPCRI_STRUCT_SPTR_THREAD_TYPE="uint32_t"
	     UPCRI_STRUCT_SPTR_PHASE_TYPE="unit32_t"
	   else
	     UPCRI_ADDR_BITS_OVERRIDE=32
	     UPCRI_THREAD_BITS_OVERRIDE=16
	     UPCRI_PHASE_BITS_OVERRIDE=16
	     UPCRI_STRUCT_SPTR_ADDR_TYPE="char *"
	     UPCRI_STRUCT_SPTR_THREAD_TYPE="uint16_t"
	     UPCRI_STRUCT_SPTR_PHASE_TYPE="uint16_t"
	   fi
	 else
	   # Old format
	   if test "$GCCUPC_PTR_BITS" = 64 ; then
	     UPCRI_ADDR_BITS_OVERRIDE=64
	     UPCRI_THREAD_BITS_OVERRIDE=16
	     UPCRI_PHASE_BITS_OVERRIDE=48
	     UPCRI_STRUCT_SPTR_THREAD_FIELD=": 16"
	     UPCRI_STRUCT_SPTR_PHASE_FIELD=": 48"
	     UPCRI_STRUCT_SPTR_ADDR_TYPE="char *"
	     UPCRI_STRUCT_SPTR_THREAD_TYPE="unsigned short"
	     UPCRI_STRUCT_SPTR_PHASE_TYPE="unsigned long"
	   else
	     UPCRI_ADDR_BITS_OVERRIDE=32
	     UPCRI_THREAD_BITS_OVERRIDE=8
	     UPCRI_PHASE_BITS_OVERRIDE=24
	     UPCRI_STRUCT_SPTR_THREAD_FIELD=": 8"
	     UPCRI_STRUCT_SPTR_PHASE_FIELD=": 24"
	     UPCRI_STRUCT_SPTR_ADDR_TYPE="char *"
	     UPCRI_STRUCT_SPTR_THREAD_TYPE="unsigned char"
	     UPCRI_STRUCT_SPTR_PHASE_TYPE="unsigned long"
	   fi
	 fi
       else  
	 UPCRI_SPTR_ADDR_FIRST=1
	 # Set GCC packed default representation.
	 UPCRI_PHASE_BITS_OVERRIDE=16
	 UPCRI_THREAD_BITS_OVERRIDE=12
	 UPCRI_ADDR_BITS_OVERRIDE=36
       fi
     fi
     for cfg in UPCRI_ADDR_BITS_OVERRIDE UPCRI_PHASE_BITS_OVERRIDE \
                UPCRI_THREAD_BITS_OVERRIDE UPCRI_STRUCT_SPTR_ADDR_TYPE \
		UPCRI_STRUCT_SPTR_PHASE_TYPE UPCRI_STRUCT_SPTR_THREAD_TYPE \
		UPCRI_STRUCT_SPTR_ADDR_FIELD UPCRI_STRUCT_SPTR_PHASE_FIELD \
		UPCRI_STRUCT_SPTR_THREAD_FIELD ; do
       eval "cval=\$$cfg"
       if test -n "$cval"; then
         AC_MSG_CHECKING([value of $cfg])
         AC_MSG_RESULT($cval)
       fi
     done
    ],
    [ USING_GCCUPC="no" ], 
    [ USING_GCCUPC="no" ]) 
AC_SUBST(USING_GCCUPC)
AM_CONDITIONAL(USING_GCCUPC, test "$USING_GCCUPC" = "yes")



dnl ---------------PROGRAMS---------------

dnl     Finds C compiler, and sets CC to it (sets GCC too if gcc used). 
dnl     Also sets CFLAGS (default val?) if not already set.
GASNET_PROG_CC

dnl determine compiler type
GASNET_FAMILY_CACHE_CHECK(C, CC, upcr_cv_cc_family)

case "$upcr_cv_cc_family" in
  GNU)  # gcc's strict-aliasing-based optimizations break pointer-to-shared in many nasty ways
    UPCR_SYSTEM_CFLAGS="-fno-strict-aliasing" ;;
  XLC)  # xlc's ansi-aliasing-based optimizations break pointer-to-shared in many nasty ways
    UPCR_SYSTEM_CFLAGS="-qnoansialias -qalias=addr" ;;
  Intel)  # bug 137c - disable a broken warning for non-POD type passed to ...
    UPCR_SYSTEM_CFLAGS="-wd1595" ;;
  Compaq) # we might need to use -noansi_alias here, but thus far there are no known instances
          # of misbehavior and some evidence that Compaq's optimizer attempts to validate aliasing
          # assumptions rather than blindly trusting the foolish ansi aliasing rules.
          # so for now, just disable the warning it issues upon detecting a violation
    UPCR_SYSTEM_CFLAGS="-msg_disable badansialias" ;;
  *)
    UPCR_SYSTEM_CFLAGS="" ;;
esac
AC_SUBST(UPCR_SYSTEM_CFLAGS)

case "${USING_GCCUPC}-${upcr_cv_cc_family}-${target_cpu}" in
  yes-PGI-x86_64)
    AC_MSG_ERROR([UPCR+GCC/UPC currently does not support the PGI backend compiler, due to x86_64 ABI incompatibilities (bug 1397)])
    ;;
esac

dnl get a host C compiler we can use to build upcc binaries like detect-upc
GASNET_PROG_HOSTCC

case "$upcr_cv_cc_family" in
  GNU)    UPCR_PROFILE_FLAG="-pg" ;;
  Intel)  UPCR_PROFILE_FLAG="-p" ;;
  Sun)    UPCR_PROFILE_FLAG="-p" ;;
  Compaq) UPCR_PROFILE_FLAG="-pg" ;; # -prof_gen also works, enables pixie profiling
  XLC)    UPCR_PROFILE_FLAG="-pg" ;;
  PGI)    UPCR_PROFILE_FLAG="-pg" ;; # -Mprof options enable lots of PGI-specific profiling
  *)      UPCR_PROFILE_FLAG="" ;;
esac
GASNET_TRY_CFLAG([$UPCR_PROFILE_FLAG],[],[UPCR_PROFILE_FLAG=""])
AC_SUBST(UPCR_PROFILE_FLAG)
if test "$UPCR_PROFILE_FLAG" != ""; then
  AC_CHECK_HEADERS(sys/types.h sys/gmon.h mon.h)
  pushdef([mon_headers],[
          #if HAVE_SYS_TYPES_H
            #include <sys/types.h>
          #endif
          #if HAVE_SYS_GMON_H
            #include <sys/gmon.h>
          #endif
          #if HAVE_MON_H
            #include <mon.h>
          #endif
          ])
  GASNET_PUSHVAR(CFLAGS,"$CFLAGS $UPCR_PROFILE_FLAG")
  AC_MSG_CHECKING([for _mcleanup()])
  AC_TRY_LINK( mon_headers, [ { _mcleanup(); } ],
               [ AC_MSG_RESULT(yes) 
                 AC_DEFINE(HAVE_MCLEANUP) ],
               [ AC_MSG_RESULT(no) ])
  AC_MSG_CHECKING([for monitor_signal(0)])
  AC_TRY_LINK( mon_headers, [ { monitor_signal(0); } ],
               [ AC_MSG_RESULT(yes) 
                 AC_DEFINE(HAVE_MONITOR_SIGNAL) ],
               [ AC_MSG_RESULT(no) ])
  AC_MSG_CHECKING([for monitor(0)])
  AC_TRY_LINK( mon_headers, [ { monitor(0); } ],
               [ AC_MSG_RESULT(yes) 
                 AC_DEFINE(HAVE_MONITOR) ],
               [ AC_MSG_RESULT(no) ])
  AC_MSG_CHECKING([for monitor(0,0,0,0,0)])
  AC_TRY_LINK( mon_headers, [ { monitor(0,0,0,0,0); } ],
               [ AC_MSG_RESULT(yes) 
                 AC_DEFINE(HAVE_MONITOR5) ],
               [ AC_MSG_RESULT(no) ])
  case "$upcr_cv_cc_family" in
    PGI)
      AC_MSG_CHECKING([for __rouexit()])
      AC_TRY_LINK( mon_headers
                   [extern void __rouexit(void);], [ { __rouexit(); } ],
                   [ AC_MSG_RESULT(yes) 
                     AC_DEFINE(HAVE_ROUEXIT) ],
                   [ AC_MSG_RESULT(no) ])
    ;;
  esac
  GASNET_POPVAR(CFLAGS)
  popdef([mon_headers])
fi

dnl     Needed for GCC-UPC, since its current shared ptr representation depends on endianness
GASNET_BIGENDIAN()

dnl     We *want* a lexer, but can live without one
dnl	This code ensures that the user can specify (--with-lex=value) or disable (--without-lex)
dnl	We get an empty LEX value in the event lex is disabled or not found.
AC_SUBST(LEX)
enabled_lex=auto
AC_ARG_WITH(lex,
    GASNET_OPTION_HELP([with-lex=value],
                   [specify the 'lex' version to use (default is auto-detection).  Use --without-lex to force use of the prebuild scanner.]),
    [case "$with_lex" in
	no|yes)	enabled_lex="$with_lex" ;;
	*)	LEX="$with_lex" ;;
     esac]
)
if test "$enabled_lex" != no; then
  AM_PROG_LEX
  # Automake uses the 'missing' script when no lex found, we want an empty LEX variable
  case "$LEX" in
    *missing*) LEX="" ;;
    :) LEX="" ;;        # Automake 1.4-p6 has a bug producing ':' instead of missing
  esac
fi
if test "$enabled_lex$LEX" = yes; then
  AC_MSG_ERROR([User specified --with-lex but no lex or flex could be found, try --with-lex=value.])
fi
AM_CONDITIONAL(UPCR_USE_LEX, test -n "$LEX")

GASNET_CHECK_SIZEOF(void *) # do NOT put inside 'case' statement...
UPCRI_PTR_BITS=`expr $SIZEOF_VOID_P \* 8`
AC_SUBST(UPCRI_PTR_BITS)
case "$target_os" in
    aix*)
        # If on AIX, and in 64 bit mode, we need to use 'nm -X64' and 'ar -X64'
        # Also, use /usr/bin/nm instead of GNU nm (which can't do 64 bits)
        if test "$UPCRI_PTR_BITS" = 64; then 
            NM="/usr/bin/nm -X64"
            AR="ar -X64"
            RANLIB="ranlib -X64"
        else
            NM="/usr/bin/nm"
        fi
        ;;
    osf*)
        # Tru64 has a default /bin/sh that emits error msgs for missing
        # commands, even when 2>/dev/null passed.  Use posix shell instead.
        if test -x /usr/bin/posix/sh; then
            BOURNE_SHELL="/usr/bin/posix/sh"
        fi
        ;;
esac
dnl     Store full paths, so we find right ones even if users have
dnl     some other version in their path
if test x"$BOURNE_SHELL" = x; then
    BOURNE_SHELL="/bin/sh"
fi

AC_PATH_PROGS(NM, $NM nm) # allow failure - nm is optional
AC_MSG_CHECKING(for GNU nm)
if test "`$NM --version 2>&1 | grep GNU`" = "" ; then
  gnu_nm=no
else
  gnu_nm=yes
fi
AC_MSG_RESULT($gnu_nm)
AM_CONDITIONAL(GNU_NM, test "$gnu_nm" = "yes")
GASNET_PATH_PROGS(AR, $AR ar gar, archiver)
GASNET_PATH_PROGS(RANLIB, $RANLIB ranlib touch, ranlib)
case "$target_os" in
    darwin*) RANLIB="$RANLIB -s -c" ;; # ensure correct common block behavior on darwin
esac
ENVCMD="${ENVCMD:-/usr/bin/env}"
AC_PATH_PROGS(ENVCMD, $ENVCMD env)
AC_PATH_PROGS(DIG, $DIG dig) # optional
AC_PATH_PROGS(NSLOOKUP, $NSLOOKUP nslookup) # optional
GASNET_PATH_PROGS(GMAKE, $GMAKE gmake make $MAKE, GNU make)
AC_MSG_CHECKING(for GNU make)
GMAKE_VERSTR=`$GMAKE --version | grep GNU 2> /dev/null`
if test "$GMAKE_VERSTR" = "" ; then
  AC_MSG_RESULT(no)
  AC_MSG_ERROR(cannot find a version of GNU make - please install GNU make and/or set \$GMAKE to indicate where it's located)
else
  GMAKE_VER=`echo "$GMAKE_VERSTR" | $PERL -n -e 'if (/([[0-9]]+)\.([[0-9]]+)(\.[[0-9]]+)?/) { $maj=$1; $min=$2; $pat=$3; printf "%i%03i%03i",($maj,$min,($pat?$pat=~s/\.//:0)) }'`
  # bug 824 - we require 3.79+
  if test $GMAKE_VER -lt 3079000 ; then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([This software requires GNU make version 3.79 or newer, and you appear to be running: "$GMAKE_VERSTR" - please install GNU make and/or set \$GMAKE to indicate where it's located])
  else
    AC_MSG_RESULT($GMAKE_VERSTR)
  fi
fi
AC_PROG_AWK 
GASNET_PATH_PROGS(TAIL, $TAIL tail cat, tail)
TAIL_FOLLOW="$TAIL"
AC_MSG_CHECKING(whether $TAIL supports -q)
if test "`$TAIL -q /dev/null 2>&1`" = "" ; then
  TAIL_FOLLOW="$TAIL_FOLLOW -q"
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi
AC_MSG_CHECKING(whether $TAIL supports multi-file)
# use -q here or GNU tail dumps headers causing false negatives
if test "`$TAIL_FOLLOW /dev/null /dev/null 2>&1`" = "" ; then
  TAIL_FOLLOW_MULTI='' 
  AC_MSG_RESULT(yes)
else
  TAIL_FOLLOW_MULTI='#' 
  AC_MSG_RESULT(no)
fi
TAIL_FOLLOW="$TAIL_FOLLOW -f"

AC_SUBST(BOURNE_SHELL)
AC_SUBST(PERL)
AC_SUBST(NM)
AC_SUBST(AR)
AC_SUBST(ENVCMD)
AC_SUBST(DIG)
AC_SUBST(NSLOOKUP)
AC_SUBST(RANLIB)
AC_SUBST(GMAKE)
AC_SUBST(TAIL)
AC_SUBST(TAIL_FOLLOW)
AC_SUBST(TAIL_FOLLOW_MULTI)

# Some vendor C compilers have a misbehaving preprocessor, so GCC's must be used
GASNET_WITH(gcc, [full pathname of GNU GCC compiler (if needed)],
    [GNU_GCC=$with_gcc
     if test "$with_gcc" = yes; then
	AC_MSG_ERROR(--with-gcc=/path/to/gcc requires a path to gcc!)
     fi
     echo with-gcc passed: GNU_GCC=$GNU_GCC]
    )
# first, set the default behaviorA
ALLOW_GNU_PREPROC="yes"
case "$upcr_cv_cc_family" in
    XLC) USE_GNU_PREPROC="yes" ;; 
    Sun) USE_GNU_PREPROC="yes" ;; 
    PGI) USE_GNU_PREPROC="yes" ;; 
    Compaq) USE_GNU_PREPROC="no" ;;  # bug 974, 1229 - this works, but simpler solution is sufficient
    *)   USE_GNU_PREPROC="no" 
         ALLOW_GNU_PREPROC="no" # not allowed unless gcc_as_cc knows about the family
    ;;
esac
AC_MSG_CHECKING([whether to use gcc as a substitute preprocessor])
GASNET_IF_ENABLED_WITH_AUTO(gnu-preproc,[Enable/disable use of Gnu gcc as a substitute preprocessor], 
      [ if test "$ALLOW_GNU_PREPROC" = "no" ; then
          AC_MSG_ERROR([Do not --enable-gnu-preproc if CC=$upcr_cv_cc_family - not supported for that compiler])
        fi
        USE_GNU_PREPROC="yes" 
      ], [ 
	if test "$USE_GNU_PREPROC" = "yes" ; then
	  AC_MSG_WARN([The use of --disable-gnu-preproc for CC=$upcr_cv_cc_family is inadvisable and may lead to compilation failures])
	fi
	USE_GNU_PREPROC="no" 
      ])
AC_MSG_RESULT($USE_GNU_PREPROC)
if test "$USE_GNU_PREPROC" = "yes" ; then
   GCC_CC_ERRMSG="The GCC preprocessor needed if CC=$upcr_cv_cc_family: use '--with-gcc=...' or make sure gcc is in your PATH"
   if test "$GNU_GCC" = no; then
      AC_MSG_ERROR([The GCC preprocessor is required if CC=$upcr_cv_cc_family: cannot use '--without-gcc'])
   fi
   if test -z "$GNU_GCC"; then
      AC_PATH_PROGS(GNU_GCC, gcc, GNU GCC)
   fi
   if test -z "$GNU_GCC"; then
      AC_MSG_ERROR($GCC_CC_ERRMSG)
   fi

   # run a check to ensure this is really GCC
   GASNET_PUSHVAR(CPP,"$GNU_GCC -E")
   GASNET_PUSHVAR(CFLAGS,"")
   AC_MSG_CHECKING(for working gcc preprocessor)
   AC_TRY_CPP([
      #if !defined(__GNUC__) || defined(__xlC__) || defined(__INTEL_COMPILER) || defined(__PGI) || defined(__PATHCC__)
      #error not GCC
      #endif
   ], [AC_MSG_RESULT(yes)], [ AC_MSG_RESULT(no)
      AC_MSG_ERROR('$GNU_GCC' is not an instance of the GCC compiler. $GCC_CC_ERRMSG)
   ])	
   GASNET_POPVAR(CPP)
   GASNET_POPVAR(CFLAGS)

   # we also need to teach GCC how to emulate the xlc preprocessor
   AC_MSG_CHECKING(how to make GNU cpp look like $CPP)
   AC_MSG_RESULT()
   AC_MSG_RESULT($PERL $srcdir/gcc_as_cc.pl --gcc="$GNU_GCC -E" --cc="$CPP" --cc-family=$upcr_cv_cc_family)
      GCC_AS_CC=`$PERL $srcdir/gcc_as_cc.pl --gcc="$GNU_GCC -E" --cc="$CPP" --cc-family=$upcr_cv_cc_family -v 2> conftest.err`
   cat conftest.err >&5
   AC_MSG_RESULT($GCC_AS_CC)
   if test -z "$GCC_AS_CC" ; then
      cat conftest.err
      AC_MSG_ERROR([Failed to detect GCC_AS_CC setting])
   fi
   rm -f conftest.err
fi
AC_SUBST(USE_GNU_PREPROC)
AC_SUBST(GCC_AS_CC)


# Find the appropriate OS suffix for executables
case "$target_os" in
  cygwin*)    EXESUFFIX='.exe' ;;
  *)          EXESUFFIX='' ;;
esac
AC_SUBST(EXESUFFIX)

# Additional preprocess step to run on the preprocessed UPC file before translation
case "$target_os" in
  cygwin*)    PLATFORM_PREPROCESS="| $AWK -F \\n '{gsub(\"__attribute__[[(]][[(]][[^)]]*cdecl[[^)]]*[[)]][[)]]\",\"\");gsub(\"__attribute__[[(]][[(]][[^)]]*dll[[^)]]*[[)]][[)]]\",\"\");print;}'" ;;
  *)          PLATFORM_PREPROCESS='' ;;
esac
if test "$USE_GNU_PREPROC" = "no" ; then
case "$upcr_cv_cc_family" in
  Sun) 
  # Sun C preprocessor drops the filename in subsequent #line directives with the same filename
  # this perl goop puts it back, and also removes the #file directives it inserts whenever seeing #line upon input
    PLATFORM_PREPROCESS="| $PERL -p -e 'if (/^#\s*(?:line\s+)?([0-9]+)\s+(\S+)\$\$/) { \$\$srcfile=\$\$2; \$\$_=\"#line \$\$1 \$\$srcfile\n\"; } elsif (/^#\s*file\s+(\S+)\$\$/) { \$\$srcfile=\$\$1; \$\$_=\"\"; } elsif (/^#\s*(?:line\s+)?([0-9]+)\s*\$\$/) { \$\$_=\"#line \$\$1 \$\$srcfile\n\"; } ' $PLATFORM_PREPROCESS"
;;
  Compaq)
  # bug 1229: drop line directives for auto-included __DECC_include_{prologue,epilogue}.h, 
  # whose line directives are incorrect
    PLATFORM_PREPROCESS="| $PERL -n -e 'print unless (/^#\s*(?:line\s+)?[0-9]+\s+.*?\/__DECC_include_(?:prologue|epilogue).h/)' $PLATFORM_PREPROCESS"
;;
*)
;;
esac
fi
AC_SUBST(PLATFORM_PREPROCESS)

case "$upcr_cv_cc_family" in
  Cray) object_strings=no  ;; # PR436 - no scannable object strings on Cray X1
  *)    object_strings=yes ;;
esac
GASNET_IF_ENABLED_WITH_AUTO(object-strings, assume strings can be scanned from unlinked objects,
                 [object_strings=yes], [object_strings=no], [])

AM_CONDITIONAL(UPCR_OBJECT_STRINGS,test "$object_strings" = "yes")

dnl ----------------------------------------------------------------------------
dnl Totalview support

GASNET_IF_ENABLED(totalview, 
    [Enable Totalview debugger support (implies --enable-debug)],
    [if test "$USING_GCCUPC"x = "yes"x ; then
       AC_MSG_ERROR([--with-gccupc and --enable-totalview cannot be used together])
     fi
     if test "$force_symmetric_sptr" = "yes"; then     
         AC_MSG_ERROR([--enable-sptr-symmetric does not yet work with --enable-totalview])
     fi
     if test ! -f "$TOP_SRCDIR/totalview/configure"; then     
         AC_MSG_ERROR([Cannot --enable-totalview - totalview support was disabled at Bootstrap])
     fi
     TOTALVIEW_SUBDIR="totalview"
     TOTALVIEW_ENABLED=yes], 
    [TOTALVIEW_SUBDIR=""
     TOTALVIEW_ENABLED=no])
AC_SUBST(TOTALVIEW_ENABLED)
AC_SUBST(TOTALVIEW_SUBDIR)


dnl ---------------CUSTOM COMMAND-LINE ARGUMENTS TO 'configure'---------------
dnl     Note:  pass '--enable-debug' to get both runtime and GASNet to use debug.
dnl
dnl     UPCR_DEBUG/GASNET_DEBUG is defined (otherwise *_NDEBUG is defined, i.e., assertions are turned off).

dnl     Empty actions here: GASnet's config does all the work.
UPCR_BUILDCONFIG="upcr,gasnet,upc_collective,upc_io,upc_memcpy_async,upc_ptradd,upc_thread_distance,upc_tick,upc_sem,upc_dump_shared,upc_trace_printf,upc_trace_mask,upc_local_to_shared,upc_atomics,pupc"
if test "$USING_GCCUPC" = "yes"; then
  BUILDCONFIG="gccupc,$UPCR_BUILDCONFIG"
else
  BUILDCONFIG="berkeleyupc,$UPCR_BUILDCONFIG,upc_memcpy_vis"
fi
BUILDCONFIG_TRACE=
BUILDCONFIG_STATS=
GASNET_IF_ENABLED(trace, [build UPC Runtime/GASNet with tracing enabled], 
                 [BUILDCONFIG_TRACE="trace"], [BUILDCONFIG_TRACE="notrace"])
GASNET_IF_ENABLED(stats, [build UPC Runtime/GASNet with statistical collection enabled], 
                 [BUILDCONFIG_STATS="stats"], [BUILDCONFIG_STATS="nostats"])
GASNET_IF_ENABLED(debug, [build UPC Runtime/GASNet in debug mode], 
                 [ enabled_debug=yes ], [ 
                   enabled_debug="$TOTALVIEW_ENABLED"
                   if test "$TOTALVIEW_ENABLED" = "yes" ; then
                      GASNET_SUBCONFIGURE_ARG(--enable-debug)
                   fi
                 ])
if test "$enabled_debug" = "yes" ; then
   BUILDCONFIG="$BUILDCONFIG,debug"
   BUILDCONFIG_TRACE="trace" # debug also enables trace and stats
   BUILDCONFIG_STATS="stats"
else
   BUILDCONFIG="$BUILDCONFIG,nodebug"
fi
BUILDCONFIG="$BUILDCONFIG,$BUILDCONFIG_TRACE"
BUILDCONFIG="$BUILDCONFIG,$BUILDCONFIG_STATS"
AM_CONDITIONAL(BUILDCONFIG_DEBUG, test "$enabled_debug" = yes)

GASNET_IF_ENABLED(inst, [enable UPC performance instrumentation via GASP - note might negatively impact performance],
  [ GASP_ENABLED=yes ], [ GASP_ENABLED=no ])
if test "$GASP_ENABLED" = "yes"; then
      BUILDCONFIG="$BUILDCONFIG,gasp"
      AC_DEFINE(UPCRI_GASP)
      GASNET_SUBCONFIGURE_ARG(--enable-srclines)
else
      BUILDCONFIG="$BUILDCONFIG,nogasp"
fi
AM_CONDITIONAL(BUILDCONFIG_GASP, test "$GASP_ENABLED" = yes)
AC_SUBST(GASP_ENABLED)

# Conduits that are incompatible w/ --uses-mpi:
# upcc needs to know if gm belongs on the MPI incompatible list
# We can just check if the user has disabled compatability, since the
# case that MPI is not found eliminates use of --uses-mpi anyway.
MPI_INCOMPATIBLE="smp"
GASNET_IF_DISABLED(mpi-compat,
        Enable/disable interoperability with MPI (enabled if MPI detected),
        MPI_INCOMPATIBLE="$MPI_INCOMPATIBLE gm")
AC_SUBST(MPI_INCOMPATIBLE)

# no-ops: pass down to gasnet.  Here for documentation purposes only
GASNET_WITH(segment-mmap-max,
   [Set default max size of mmap-based GASNet segments (ex: "2GB", "1045MB") -- see also --enable-segment-large])
GASNET_WITH(max-pthreads-per-node, [Set max pthreads supported per GASNet node])
BUILDCONFIG_SEGMENT="segment_fast"
GASNET_IF_ENABLED(segment-fast,
   [Select GASNet's FAST segments (default), for the fastest remote access with a possible cost in max shared memory size])
GASNET_IF_ENABLED(segment-large,
   [Select GASNet's LARGE segments, for the largest possible shared memory size (see also --with-segment-mmap-max), at a possible cost in remote access time],[
   BUILDCONFIG_SEGMENT="segment_large"
])
GASNET_IF_ENABLED_NOHELP(segment-everything,[
  GASNET_MSG_WARN([--enable-segment-everything is *NOT* supported for Berkeley UPC!!!])
  BUILDCONFIG_SEGMENT="segment_everything"
])
BUILDCONFIG="$BUILDCONFIG,$BUILDCONFIG_SEGMENT"
GASNET_WITH(lapi-type,
   [IBM Switch hardware type ("colony" or "federation", default is to probe)])

BUILDCONFIG_OS=os_`echo "$target_os" | $PERL -p -e '/([[^0-9.]]+)/ ; print $1; last'`
case "$BUILDCONFIG_OS" in
  os_linux*) BUILDCONFIG_OS="os_linux";;
esac
BUILDCONFIG_CPU=cpu_"$target_cpu"
if test "$UPCRI_PTR_BITS" = 64; then
  BUILDCONFIG_CPU="$BUILDCONFIG_CPU,cpu_64"
else
  BUILDCONFIG_CPU="$BUILDCONFIG_CPU,cpu_32"
fi
BUILDCONFIG_CC=cc_`echo "$upcr_cv_cc_family" | $PERL -p -e 'print lc($_); last'`
BUILDCONFIG="$BUILDCONFIG,$BUILDCONFIG_OS,$BUILDCONFIG_CPU,$BUILDCONFIG_CC"

# default to packed shared ptr rep
if test "$force_struct_sptr" = "yes"; then
      AC_DEFINE(UPCRI_STRUCT_SPTR)
      BUILDCONFIG="$BUILDCONFIG,structsptr"
      if test -n "$UPCRI_STRUCT_SPTR_ADDR_TYPE" ; then
        AC_DEFINE_UNQUOTED(UPCRI_STRUCT_SPTR_ADDR_TYPE,[$UPCRI_STRUCT_SPTR_ADDR_TYPE])
        AC_DEFINE_UNQUOTED(UPCRI_STRUCT_SPTR_THREAD_TYPE,[$UPCRI_STRUCT_SPTR_THREAD_TYPE])
        AC_DEFINE_UNQUOTED(UPCRI_STRUCT_SPTR_PHASE_TYPE,[$UPCRI_STRUCT_SPTR_PHASE_TYPE])
	# Field specifiers (eg, ": 24") are defined only when needed.
	if test -n "$UPCRI_STRUCT_SPTR_ADDR_FIELD" ; then
          AC_DEFINE_UNQUOTED(UPCRI_STRUCT_SPTR_ADDR_FIELD,[$UPCRI_STRUCT_SPTR_ADDR_FIELD])
	fi
	if test -n "$UPCRI_STRUCT_SPTR_THREAD_FIELD" ; then
          AC_DEFINE_UNQUOTED(UPCRI_STRUCT_SPTR_THREAD_FIELD,[$UPCRI_STRUCT_SPTR_THREAD_FIELD])
	fi
	if test -n "$UPCRI_STRUCT_SPTR_PHASE_FIELD" ; then
          AC_DEFINE_UNQUOTED(UPCRI_STRUCT_SPTR_PHASE_FIELD,[$UPCRI_STRUCT_SPTR_PHASE_FIELD])
	fi
      fi
else
      AC_DEFINE(UPCRI_PACKED_SPTR)
      BUILDCONFIG="$BUILDCONFIG,packedsptr"
fi

# GCCUPC may order its sptr fields (addr, thread, phase), thus "address first".
if test -n "$UPCRI_SPTR_ADDR_FIRST" ; then
      AC_DEFINE_UNQUOTED(UPCRI_SPTR_ADDR_FIRST,[$UPCRI_SPTR_ADDR_FIRST])
fi

# Enable symmetric pointer if enabled by user
if test "$force_symmetric_sptr" = "yes"; then
      if test "$UPCRI_PTR_BITS" != "64"; then
	AC_MSG_ERROR(--enable-sptr-symmetric is only available on 64-bit targets)
      fi
      AC_DEFINE(UPCRI_SYMMETRIC_SPTR)
      BUILDCONFIG="$BUILDCONFIG,symmetricsptr"
fi

GASNET_WITH(sptr-packed-bits, [value='phase,thread,addr' tweak bit distribution in packed sptr representation, requires phase+thread+addr=64 ], [
  if test "$force_struct_sptr" = "yes"; then
    AC_MSG_ERROR([--with-sptr-packed-bits is only supported for packed sptr representation])
  fi
  if test "$USING_GCCUPC" = "yes" -a -z "$with_gccupc_version" ; then
    AC_MSG_ERROR([--with-sptr-packed-bits is not supported for GCC/UPC])
  fi
  UPCRI_PHASE_BITS_OVERRIDE=`echo $withval | $PERL -ne 'm/^(\d+),(\d+),(\d+)$/;  print $1 if ($1+$2+$3 == 64);'`
  UPCRI_THREAD_BITS_OVERRIDE=`echo $withval | $PERL -ne 'm/^(\d+),(\d+),(\d+)$/; print $2 if ($1+$2+$3 == 64);'`
  UPCRI_ADDR_BITS_OVERRIDE=`echo $withval | $PERL -ne 'm/^(\d+),(\d+),(\d+)$/;   print $3 if ($1+$2+$3 == 64);'`
  if test -z "$UPCRI_PHASE_BITS_OVERRIDE"  -o "$UPCRI_PHASE_BITS_OVERRIDE"  -lt 1 -o \
          -z "$UPCRI_THREAD_BITS_OVERRIDE" -o "$UPCRI_THREAD_BITS_OVERRIDE" -lt 1 -o \
          -z "$UPCRI_ADDR_BITS_OVERRIDE"   -o "$UPCRI_ADDR_BITS_OVERRIDE"   -lt 20 ; then
    AC_MSG_ERROR([--with-sptr-packed-bits=phase,thread,addr requires phase+thread+addr=64 and phase >= 1 and thread >= 1 and addr >= 20])
  fi
  if test "$UPCRI_ADDR_BITS_OVERRIDE" -gt "$UPCRI_PTR_BITS" \
          -a "$USING_GCCUPC" = "no" ; then
    AC_MSG_ERROR([--with-sptr-packed-bits=phase,thread,addr requires addr <= 8*sizeof(void*)])
  fi
])
# The layout of a packed shared pointer can be chenged by --sptr-packed-bits
# (as shown above), or when GCC/UPC is configured to support the
# packed pointer representation.  GCC/UPC also sets these fields when
# configuring its 'struct' sptr. representation.
if test -n "$UPCRI_ADDR_BITS_OVERRIDE"; then
  AC_DEFINE_UNQUOTED(UPCRI_PHASE_BITS_OVERRIDE, $UPCRI_PHASE_BITS_OVERRIDE)
  AC_DEFINE_UNQUOTED(UPCRI_THREAD_BITS_OVERRIDE,$UPCRI_THREAD_BITS_OVERRIDE)
  AC_DEFINE_UNQUOTED(UPCRI_ADDR_BITS_OVERRIDE,  $UPCRI_ADDR_BITS_OVERRIDE)
fi

AC_MSG_CHECKING(for compiler feature list)
AC_MSG_RESULT($BUILDCONFIG)
AC_SUBST(BUILDCONFIG)

#  Allow translator location to be specified during configure
AC_ARG_WITH(translator, 
    GASNET_OPTION_HELP([with-translator], [specify UPC-to-C translator]),
    [if test "$with_translator" = yes; then
        AC_MSG_ERROR(--with-translator requires an argument!)
     fi
     if test x"$USING_GCCUPC" = "xyes"; then
        AC_MSG_ERROR(cannot use both --with-gccupc and --with-translator!)
     fi
     TRANSLATOR="$with_translator"],
    [if test -z "$TRANSLATOR"; then 
        TRANSLATOR="$default_translator"
      fi
    ])
AC_SUBST(TRANSLATOR)

# check for prohibited relative translator paths
TRANSCHECK=`echo "$TRANSLATOR" | $PERL -ne 'if (m@^http://@) { print "ok" } elsif (m@^[[^:]]+:(.)@) { if ($1 ne "/") { print "bad" } else { print "ok" } } elsif (m@^/@) { print "ok" } else { print "bad" }'`
if test "$TRANSCHECK" != "ok" ; then
  AC_MSG_ERROR([translator setting '$TRANSLATOR' does not look like a valid default translator path. Relative paths are prohibited.])
fi

#     
#     default: support pthreads-based UPC programs if library found
#     note this will be trimmed below based on the outcome of pthread support tests
GASNET_IF_ENABLED_WITH_AUTO(par, support pthreaded UPC processes,
                 [PARSEQ="par seq"
		  PARSEQ_force="yes"], [PARSEQ="seq"], [PARSEQ="par seq"])

dnl   Check to see if __thread attribute exists and works (for gccupc pthreads support)
dnl
GASNET_PUSHVAR(LIBS,"$LIBS -lpthread")
GASNET_CHECK_TLS_SUPPORT([
  AC_DEFINE([HAVE_GCC_TLS_SUPPORT], 1)
  GCC_TLS_SUPPORT=yes
 ],[
  GCC_TLS_SUPPORT=no
 ])
AC_SUBST(GCC_TLS_SUPPORT)
GASNET_POPVAR(LIBS)

if test "$USING_GCCUPC" = "yes" -a "$GCC_TLS_SUPPORT" = "no" -a "$PARSEQ" != "seq"; then
  GASNET_MSG_WARN([GCCUPC requires __thread support for pthreaded operation - disabling pthreads support])
  # don't bother building pthreaded versions of libraries, since they won't work with GCCUPC 
  PARSEQ="seq"
  GASNET_SUBCONFIGURE_ARG(--disable-par)
  # Could pass --disable-pthreads to GASNet configure, but that breaks conduits that need private threads (vapi)
fi

# always disable GASNet parsync libraries to save build time, because BUPC never uses them
GASNET_SUBCONFIGURE_ARG(--disable-parsync)

dnl     Enable this if you're using glibc and you want to be able to pass shared
dnl     pointers (as %S/%P for shared_ptr/pshared_ptr) to printf and friends
dnl GASNET_IF_ENABLED(extend-printf, [add %S/%P formats to printf (for shared/pshared ptr)],
dnl                 [extend_printf="yes"], [])


dnl ---------------LIBRARIES---------------


dnl ---------------HEADERS---------------
AC_HEADER_STDC 

dnl --- C99 headers ---
AC_CHECK_HEADERS(assert.h complex.h ctype.h errno.h fenv.h   	\
		 float.h inttypes.h iso646.h limits.h locale.h 	\
		 math.h setjmp.h signal.h stdarg.h stdbool.h 	\
		 stddef.h stdint.h stdio.h stdlib.h string.h 	\
		 tgmath.h time.h wchar.h wctype.h)

dnl Prefer C99/Posix stdarg.h to BSD varargs
AC_CHECK_HEADERS(stdarg.h varargs.h, break)

dnl --- other POSIX & system headers of interest ---
AC_CHECK_HEADERS(fcntl.h unistd.h sys/types.h sys/stat.h memory.h strings.h	\
                 sys/mman.h sys/resource.h printf.h netinet/tcp.h)


dnl Test for #include_next support
dnl Default to probing for include_next and using it when it appears to work
dnl GCCUPC, Compaq, XLC, Intel and PGI all require include_next for correct operation
dnl and it seems safest to use it elsewhere whenever it's available
HAVE_CPP_INCLUDE_NEXT=1
GASNET_IF_ENABLED_WITH_AUTO(include-next, try to use include_next in header wrappers,
                 [FORCE_CPP_INCLUDE_NEXT=1], [HAVE_CPP_INCLUDE_NEXT=0], [])

if test "$HAVE_CPP_INCLUDE_NEXT" != "0"; then
AC_MSG_CHECKING([for include_next support])
dnl Here we carefully emulate the two ways we may include a header wrapper
CONFTMP="$TOP_BUILDDIR/conftemp"
CONFTMPINC_BASE="include"
CONFTMPINC="$CONFTMP/$CONFTMPINC_BASE"
mkdir -p $CONFTMPINC
cat > "$CONFTMPINC/stdlib.h" << EOF
#ifdef IN_STDLIB_WRAPPER
  #error reinclusion of stdlib wrapper
#endif
#define IN_STDLIB_WRAPPER
#include_next <stdlib.h>
#undef IN_STDLIB_WRAPPER
#define STDLIB_WRAPPER
EOF
cat > "$CONFTMPINC/assert.h" << EOF
#ifdef IN_ASSERT_WRAPPER
  #error reinclusion of assert wrapper
#endif
#define IN_ASSERT_WRAPPER
#include_next <assert.h>
#undef IN_ASSERT_WRAPPER
#define ASSERT_WRAPPER
EOF

GASNET_PUSHVAR(CPPFLAGS,"-I$CONFTMPINC -I$CONFTMP $CPPFLAGS")
AC_TRY_COMPILE([
            #include "stdlib.h"
            #include "$CONFTMPINC_BASE/assert.h"
           ],[
            ldiv_t ld;
	    void *p = malloc(10);
            #ifndef assert
	      #error assert missing
            #endif
            #ifndef ASSERT_WRAPPER
	      #error assert wrapper missing
            #endif
            #ifndef STDLIB_WRAPPER
	      #error stdlib wrapper missing
            #endif
           ],
           [HAVE_CPP_INCLUDE_NEXT=1 ; AC_MSG_RESULT(yes)],
           [HAVE_CPP_INCLUDE_NEXT=0 ; AC_MSG_RESULT(no)])
GASNET_POPVAR(CPPFLAGS)
rm -Rf "$CONFTMP"
if test "$HAVE_CPP_INCLUDE_NEXT$FORCE_CPP_INCLUDE_NEXT" = "01" ; then
  AC_MSG_ERROR(['--enable-include-next' passed, but include_next does not appear to work])
fi
fi
AC_SUBST(HAVE_CPP_INCLUDE_NEXT)

SYSHDR_FILE=conftest-syshdr.c
echo "#include <confdefs.h>" > $SYSHDR_FILE

dnl find full pathname for some headers, if they exist
if test "$USE_GNU_PREPROC" = "yes"; then
  # help the FIND_HEADER detection logic by giving it a sane preprocessor
  GASNET_FIND_HEADER_CPP="$GCC_AS_CC"
fi
AC_DEFUN([UPCR_HEADER_WRAPPER],[
  GASNET_FIND_HEADER($1)
  pushdef([uppername],translit([$1],'a-z/.-','A-Z___'))
  HAVE_HEADER=$HAVE_[]uppername
  PATH_HEADER=$PATH_[]uppername
  if test "$HAVE_CPP_INCLUDE_NEXT" = "1" ; then
    GASNET_SUBST_TEXT(UPCR_INCLUDE_NEXT_[]uppername,[
      #if $HAVE_HEADER
         #include_next <$1>
         #include_next <$1>
      #endif
    ])
  else
    GASNET_SUBST_TEXT(UPCR_INCLUDE_NEXT_[]uppername,[
      #ifdef __SUNPRO_C
        #pragma error_messages(off, E_INC_USR_INC_MAY_NOT_PORTABLE)
      #endif
      #if $HAVE_HEADER
         #include $PATH_HEADER
         #include $PATH_HEADER
      #endif
    ])
  fi
  echo '#line 1 "'"$PATH_HEADER"'"' >> $SYSHDR_FILE
  echo 'extern int x;' >> $SYSHDR_FILE
  popdef([uppername])
])
UPCR_HEADER_WRAPPER(alloca.h)
UPCR_HEADER_WRAPPER(fenv.h)
UPCR_HEADER_WRAPPER(stdint.h)
UPCR_HEADER_WRAPPER(string.h)
UPCR_HEADER_WRAPPER(stdlib.h)
UPCR_HEADER_WRAPPER(stdio.h)
UPCR_HEADER_WRAPPER(stddef.h)
UPCR_HEADER_WRAPPER(stdbool.h)
UPCR_HEADER_WRAPPER(stdarg.h)
UPCR_HEADER_WRAPPER(inttypes.h)
UPCR_HEADER_WRAPPER(limits.h)
UPCR_HEADER_WRAPPER(math.h)
UPCR_HEADER_WRAPPER(time.h)
UPCR_HEADER_WRAPPER(sys/stat.h)

AC_MSG_CHECKING(for system header directories)
touch upcr_config.h
cat $TOP_SRCDIR/upcr_syshdrs.h >> $SYSHDR_FILE
echo "${GASNET_FIND_HEADER_CPP:-$CPP} -I. -I$TOP_SRCDIR/gasnet/other $SYSHDR_FILE > $SYSHDR_FILE.tmp" >&5
      ${GASNET_FIND_HEADER_CPP:-$CPP} -I. -I$TOP_SRCDIR/gasnet/other $SYSHDR_FILE > $SYSHDR_FILE.tmp 2>&5
$PERL -n -e '{ if (m|^#(?:line)?\s*[0-9]+\s*"(/.*)/[^/]+"|) { $dirs{$1} = 1; } } END { my @dirs = (keys %dirs); delete @dirs{(map {my $x = $_; grep (m|^$x/|, @dirs);} @dirs)}; delete @dirs{"'"$TOP_SRCDIR/gasnet/other"'"}; print join(":", (keys %dirs)); }' $SYSHDR_FILE.tmp > $SYSHDR_FILE.out 2>&5
SYSTEM_HEADER_DIRS=`cat $SYSHDR_FILE.out`
if test -z "$SYSTEM_HEADER_DIRS" ; then
  SYSTEM_HEADER_DIRS='/usr/include'
  GASNET_MSG_WARN(Failed to auto-detect SYSTEM_HEADER_DIRS - using $SYSTEM_HEADER_DIRS)
fi
AC_MSG_RESULT($SYSTEM_HEADER_DIRS)
AC_SUBST(SYSTEM_HEADER_DIRS)
rm -f $SYSHDR_FILE*

HAVE_BUILTIN_ALLOCA=0
case "$upcr_cv_cc_family" in
  XLC)  # bug 1823 and 2123 
    AC_MSG_CHECKING([check for xlc's __builtin_alloca symbol])
    AC_TRY_LINK( [ #include <alloca.h> ], [ { char *p = __builtin_alloca(1); } ],
                 [ AC_MSG_RESULT(yes) 
                   HAVE_BUILTIN_ALLOCA=1 ],
                 [ AC_MSG_RESULT(no) ])
  ;;
esac
AC_SUBST(HAVE_BUILTIN_ALLOCA)

HAVE_ALLOCA_IN_STDLIB_H=0
if test x"$HAVE_ALLOCA_H" != x1; then
  # Bug 2131 - FreeBSD-7.0 has no alloc.h but declares/defines alloca() in stdlib.h
  AC_MSG_CHECKING([for alloca in stdlib.h])
  AC_TRY_COMPILE([ #include <stdlib.h>
  ],[	/* Either #define'd or declared - either one will compile w/o error */
	#ifndef alloca
		int x = (int)sizeof(&alloca); /* fails unless declared */
	#endif
  ],[ HAVE_ALLOCA_IN_STDLIB_H=1; AC_MSG_RESULT([yes])
  ],[ AC_MSG_RESULT([no])])
fi
AC_SUBST(HAVE_ALLOCA_IN_STDLIB_H)

dnl ---------------TYPEDEFS, STRUCTS, COMPILER CHARACTERISTICS-------
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_TYPE_SIGNAL

if test "$ac_cv_header_stddef_h" = "yes" ; then
  dnl Some platforms define types like ptrdiff_t only in stddef.h
  dnl so make sure that AC_CHECK_SIZEOF uses it
  echo "#include <stddef.h>" >> confdefs.h
fi

dnl     Get size of types on this platform
# setup_inttypes() takes care of most of them, but we also need a couple others
# - note: normally we'd get this info from gasnet_config.h, but Totalview
# doesn't see it, so we need to dupe it here.
GASNET_SETUP_INTTYPES()
#GASNET_CHECK_SIZEOF(void *) # already handled above
GASNET_CHECK_SIZEOF(ptrdiff_t)
GASNET_CHECK_SIZEOF(size_t)

AC_MSG_CHECKING(whether char is signed)
AC_TRY_RUN([
  int main() {
    char c = (char)(int)-5;
    if (c > 0) return 0;
    else return 1;
  }],[ CHAR_IS_SIGNED=0 ], 
     [ CHAR_IS_SIGNED=1 ],
     [ GASNET_TRY_CACHE_EXTRACT_EXPR([whether char is signed (binary probe)],CHAR_IS_SIGNED,[],
       [(((char)(int)-5) > 0 ? 0 : 1)],CHAR_IS_SIGNED)
       if test -z "$CHAR_IS_SIGNED"; then
         GASNET_CROSS_VAR(CHAR_IS_SIGNED,CHAR_IS_SIGNED) 
       fi
     ])
if test "$CHAR_IS_SIGNED" = 0; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
fi
AC_SUBST(CHAR_IS_SIGNED)

AC_MSG_CHECKING(for direction of stack growth)
AC_TRY_RUN([
  int foo(int *p, int x) { 
    int local = 1;
    if (x < 100) return foo(p,x+1);
    else if (&local > p) return 1;
    else return 0;
  }
  int main() {
    int local = 1;
    return foo(&local, 0);
  }],[ STACK_GROWS_UP=0 ], 
     [ STACK_GROWS_UP=1 ],
     [ GASNET_CROSS_VAR(STACK_GROWS_UP,STACK_GROWS_UP) ])
if test "$STACK_GROWS_UP" = "0" ; then
  AC_MSG_RESULT(down) 
else
  AC_DEFINE(UPCRI_STACK_GROWS_UP) 
  AC_MSG_RESULT(up) 
fi

AC_MSG_CHECKING(for attribute(cleanup))
AC_TRY_RUN([
  int result = 3; 
  int *addr;
  void clean(int *pi) {
    if (pi != addr) result = 1;
    else if (*pi != 1) result = 2;
    else result = 0;
  }
  int foo() { 
    int local  __attribute__((cleanup(clean))) = 1;
    addr = &local;
  }
  int main() {
    foo();
    return result;
  }],[ ATTRIBUTE_CLEANUP=1 ], 
     [ ATTRIBUTE_CLEANUP=0 ],
     [ ATTRIBUTE_CLEANUP=0 ])
if test "$ATTRIBUTE_CLEANUP" = "0" ; then
  AC_MSG_RESULT(no) 
else
  AC_DEFINE(UPCRI_HAVE_ATTRIBUTE_CLEANUP) 
  AC_MSG_RESULT(yes) 
fi

dnl Check for C99 _Bool type
AC_TRY_COMPILE( , [ _Bool b = 1; ], HAVE_BOOL=1, HAVE_BOOL=0)
AC_SUBST(HAVE_BOOL)

GASNET_GET_SIG(INT)
GASNET_GET_SIG(TERM)
GASNET_GET_SIG(KILL)

dnl ---------------LIBRARY FUNCTIONS---------------

dnl     TODO:  This doesn't check for how you need to perform
dnl     anonymous shared mmaps
AC_FUNC_MMAP
AC_CHECK_FUNCS([bzero getpagesize], [], [])

GASNET_CHECK_OVERRIDE_PTHREADS

AC_SEARCH_LIBS(pthread_setconcurrency, pthread pthreads c_r, AC_DEFINE(HAVE_PTHREAD_SETCONCURRENCY))
AC_SEARCH_LIBS(pthread_attr_setguardsize, pthread pthreads c_r, AC_DEFINE(HAVE_PTHREAD_ATTR_SETGUARDSIZE))
# see if new linux pthreads lib is used
AC_SEARCH_LIBS(pthread_setaffinity_np, pthread pthreads c_r, AC_DEFINE(HAVE_PTHREADS_NPTL))

GASNET_TRY_CACHE_LINK(for __builtin_prefetch, cc_has_builtin_prefetch,
  [int x;], [__builtin_prefetch(&x,0);],
  AC_DEFINE(HAVE_BUILTIN_PREFETCH))
GASNET_TRY_CACHE_LINK(for __builtin_huge_val, cc_has_builtin_huge_val,
  [double x = __builtin_huge_val();], [],
  AC_DEFINE(HAVE_BUILTIN_HUGE_VAL))
GASNET_TRY_CACHE_LINK(for __builtin_huge_valf, cc_has_builtin_huge_valf,
  [float x = __builtin_huge_valf();], [],
  AC_DEFINE(HAVE_BUILTIN_HUGE_VALF))
GASNET_TRY_CACHE_LINK(for __builtin_inf, cc_has_builtin_inf,
  [double x = __builtin_inf();], [],
  AC_DEFINE(HAVE_BUILTIN_INF))
GASNET_TRY_CACHE_LINK(for __builtin_inff, cc_has_builtin_inff,
  [float x = __builtin_inff();], [],
  AC_DEFINE(HAVE_BUILTIN_INFF))
GASNET_TRY_CACHE_LINK(for __builtin_nan, cc_has_builtin_nan,
  [double x = __builtin_nan("");], [],
  AC_DEFINE(HAVE_BUILTIN_NAN))
GASNET_TRY_CACHE_LINK(for __builtin_nanf, cc_has_builtin_nanf,
  [float x = __builtin_nanf("");], [],
  AC_DEFINE(HAVE_BUILTIN_NANF))

#       Adding new printf format specifiers will only work if glibc used
dnl if test x"$extend_printf" = xyes; then 
dnl     AC_CHECK_FUNC([register_printf_function], 
dnl                    [AC_DEFINE(UPCR_EXTEND_PRINTF)],
dnl                    [GASNET_MSG_WARN("--enable-extend-printf only works with GNU glibc: ignoring")])
dnl fi

dnl --------------- Magic to ensure gasnet's conduits match runtime's ---------------

# the GASNet conduits, in order of increasingly preferred default conduit...
# those which GASNet auto-detects should use GASNET_IF_ENABLED_WITH_AUTO

AC_DEFUN([UPCR_CONDUIT],[
GASNET_IF_ENABLED_WITH_AUTO($1, [$2])
])

UPCR_CONDUIT(udp, [support running over UDP (portable, low-performance conduit) ])
UPCR_CONDUIT(smp, [support running over smp loopback (no network) ])
UPCR_CONDUIT(mpi, [support running over MPI 1.1/2.x (portable, low-performance conduit) ])
UPCR_CONDUIT(sci, [support running over Dolphin SCI (EXPERIMENTAL) ])
UPCR_CONDUIT(elan, [support running over Quadrics' elan ])
UPCR_CONDUIT(lapi, [support running over IBM LAPI ])
UPCR_CONDUIT(gm, [support running over Myrinet GM ])
UPCR_CONDUIT(shmem, [support running over SHMEM ])
UPCR_CONDUIT(vapi, [support running over Mellanox VAPI ])
UPCR_CONDUIT(dcmf, [support running over IBM BlueGene/P DCMF ])
UPCR_CONDUIT(ibv, [support running over OpenIB/OpenFabrics IB Verbs ])
UPCR_CONDUIT(portals, [support running over Cray Portals ])

echo "--------------------- Configuring GASNet -------------------------"
CONDUIT_LIST=$TOP_BUILDDIR/.upcr-conduit-list.tmp
CONDUIT_LIST_SUPPRESS=yes
export CONDUIT_LIST
export CONDUIT_LIST_SUPPRESS
GASNET_SUBCONFIGURE_INVOKE(gasnet)
echo "--------------- Completing UPCR configure --------------------"

dnl    Extract the list of supported conduits
AC_MSG_CHECKING([for conduit list])
GASNET_SUBCONFIGURE_EXTRACT(gasnet, CONDUITS)
GASNET_SUBCONFIGURE_EXTRACT(gasnet, PTHREADS)
# trim space
CONDUITS=`echo $CONDUITS`
DEFAULT_CONDUIT=`echo "$CONDUITS" | $AWK -F' ' '{print \$NF}'`
AC_MSG_RESULT([list=($CONDUITS) default=($DEFAULT_CONDUIT) pthread_support=($PTHREADS)])
if test "$CONDUITS" = "" ; then
  cat $CONDUIT_LIST
  AC_MSG_ERROR([No GASNet conduit support found!])
fi
if test "$PARSEQ" = "par seq" -a "$PTHREADS" != "yes" ; then
  PARSEQ="seq" # pthreads missing - disable support
fi
if test "$PARSEQ$PARSEQ_force" = "seqyes" ; then
  AC_MSG_ERROR([--enable-par passed, but insufficient pthreads support found])
fi

# Determine which libraries are to be built
# - each conduit also has a Totalview upcr and assistant library (seq only)
TARGETLIBS=
ASSISTANTLIBS=
for conduit in $CONDUITS; do
    if test $conduit = "shmem"; then
        TARGETLIBS="libupcr-$conduit-seq.a $TARGETLIBS"
    else
        for parseq in $PARSEQ; do
            TARGETLIBS="libupcr-$conduit-$parseq.a $TARGETLIBS"
        done
    fi
    # Totalview upcr and assistant library
    if test "$TOTALVIEW_ENABLED" = "yes"; then
        TARGETLIBS="libupcr-$conduit-tv.a $TARGETLIBS"
        ASSISTANTLIBS="libupcda-$conduit-tv.la $ASSISTANTLIBS"
    fi
done

AC_SUBST(CONDUITS)
AC_SUBST(DEFAULT_CONDUIT)
AC_SUBST(PTHREADS)
AC_SUBST(PARSEQ)
AC_SUBST(TARGETLIBS)
AC_SUBST(ASSISTANTLIBS)
AM_CONDITIONAL(HAVE_PTHREAD, test "$PTHREADS" = "yes")

# slurp Lapi-rdma config
if echo "$CONDUITS" | grep lapi >/dev/null; then
  GASNET_SUBCONFIGURE_EXTRACT(gasnet, POE_RDMA_ARGS)
fi
AC_SUBST(POE_RDMA_ARGS)

if test "$TOTALVIEW_SUBDIR" != ""; then
  echo "--------------------- Configuring Totalview -------------------------"
  export ASSISTANTLIBS
  GASNET_SUBCONFIGURE_INVOKE($TOTALVIEW_SUBDIR) 
fi

dnl ---------------OUTPUT---------------

dnl     Work around automake intercepting all 'include's in Makefile.am
MAKE_INCLUDE="include"

# Pick some values out of a hat for shared heap size/offset.
#  - These are deliberately low by default, just so they will
#    work out of the box on almost any machine.  It's up to the 
#    sysadmin to set correct limits as part of install process.
#  - offset should be 0 on all known platforms at present.
SHARED_HEAP_SIZE="64MB"
SHARED_HEAP_OFFSET="0"

case "$target_os" in
  hpux*)
     if test "$target_cpu" = "ia64" ; then
	# keep translator from choking on some compiler built-in types 
        # that unfortunately appear in the common system headers
	PRETRANS_CPPFLAGS="-D__float80='long double' -D__fpreg='long double' -D__va_list__='char *'"
     fi
  ;;
esac
case "$upcr_cv_cc_family" in
  GNU|Pathscale)  # keep translator from choking on gcc builtins used in system headers
    PRETRANS_CPPFLAGS="$PRETRANS_CPPFLAGS -D__NO_STRING_INLINES -D__NO_MATH_INLINES -D__NO_INLINE__"
  ;;
esac
AC_SUBST(PRETRANS_CPPFLAGS)

dnl     Figure out how to install config files
GASNET_SET_INSTALL_CMD

dnl     Variables we wish to export
AC_SUBST(MAKE_INCLUDE)
AC_SUBST(SHARED_HEAP_SIZE)
AC_SUBST(SHARED_HEAP_OFFSET)

PERLSTART=$TOP_BUILDDIR/gasnet/other/perlstart
AC_SUBST_FILE(PERLSTART)

GASNET_FIX_EXEC(upcc)
GASNET_FIX_EXEC(upcrun)
GASNET_FIX_EXEC(contrib/upcdecl/upcdecl)
GASNET_FIX_EXEC(detect-upc/upcppp)
GASNET_FIX_EXEC(harness/harness)
GASNET_FIX_EXEC(harness/runjobs)
GASNET_FIX_EXEC(harness/checkfail)

dnl     This must be at end of file--generates Makefile
GASNET_END_CONFIGURE([])
AC_OUTPUT(
        Makefile
        CTestTop.mak
        CTestBottom.mak
        config-aux/Makefile
        docs/Makefile
        man/Makefile
        umalloc/Makefile
        contrib/Makefile
        contrib/upcdecl/Makefile
        contrib/upcdecl/upcdecl
        contrib/upcc_CGI/Makefile
	profile/Makefile
        upcr_geninclude/Makefile
        upcr_geninclude/alloca.h
        upcr_geninclude/fenv.h
        upcr_geninclude/inttypes.h
        upcr_geninclude/limits.h
        upcr_geninclude/stdint.h
        upcr_geninclude/stdlib.h
        upcr_geninclude/stdio.h
        upcr_geninclude/string.h
        upcr_geninclude/stdbool.h
        upcr_geninclude/stddef.h
        upcr_geninclude/stdarg.h
        upcr_geninclude/math.h
        upcr_geninclude/time.h
        upcr_geninclude/sys/Makefile
        upcr_geninclude/sys/stat.h
        upcr_preinclude/Makefile
        upcr_postinclude/Makefile
	upcr_extinclude/Makefile
        detect-upc/Makefile
	upcc
	upcrun
        upcc.mak
        upcc.conf
        upcr.mak
        upcrun.conf
        detect-upc/upcppp
	harness/Makefile
	harness/harness
	harness/runjobs
	harness/checkfail
	harness/compiler.spec
	harness/gcc-upc-upcr.spec
	harness/gcc-upc-3-upcr.spec
, 
GASNET_FIX_EXEC_OUTPUT()
GASNET_SANITIZE_PACKAGE(upcr_config.h)
GASNET_MSG_WARN_FINISH()
CONDUIT_LIST=.upcr-conduit-list.tmp
if test -f "$CONDUIT_LIST" ; then
  cat $CONDUIT_LIST
  rm -f $CONDUIT_LIST
fi
, 
GASNET_FIX_EXEC_SETUP()
)

